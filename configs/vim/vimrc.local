" Custom colorscheme config {
"colorscheme solarized
"let g:solarized_termcolors=16
"
colorscheme molokai
let g:airline_theme='molokai'
let g:molokai_original = 1
let g:rehash256 = 1
set re=1
if has("nvim")
    set termguicolors
    let g:python_host_prog = '/usr/local/bin/python'
    let g:python3_host_prog = '/usr/local/bin/python3'
    " Use deoplete.
    let g:deoplete#enable_at_startup = 1
else
    set ttyscroll=3
    let g:nobg256 = 1
endif
" }

" Sasslint {
if isdirectory(expand("~/.vim/bundle/vim-sass-lint"))
    set statusline+=%#warningmsg#
    set statusline+=%{SyntasticStatuslineFlag()}
    set statusline+=%*
    let g:syntastic_always_populate_loc_list = 1
    let g:syntastic_auto_loc_list = 0
    let g:syntastic_check_on_open = 1
    let g:syntastic_check_on_wq = 0
    let g:syntastic_sass_checkers=["sasslint"]
    let g:syntastic_scss_checkers=["sasslint"]
endif
" }

" Better performance for long-lines {
set synmaxcol=0
set ttyfast " u got a fast terminal
set lazyredraw " to avoid scrolling problems
" }

" Tabularize {
if isdirectory(expand("~/.vim/bundle/tabular"))
    nmap <Leader>a<Space> :Tabularize /<Space><CR>
    vmap <Leader>a<Space> :Tabularize /<Space><CR>
endif
" }

" CSScomb {
if isdirectory(expand("~/.vim/bundle/vim-csscomb"))
    " Map bc to run CSScomb. bc stands for beautify css
    autocmd FileType css noremap <buffer> <leader>bc :CSScomb<CR>
    " Automatically comb your CSS on save
    "autocmd BufWritePre,FileWritePre *.css,*.less,*.scss,*.sass silent! ks|call CssBeautyCus()|'s
    "fun CssBeautyCus()
    ":CSScomb
    "endfun
endif
" }

" Fuzzy Find  {
if isdirectory(expand("~/.vim/bundle/fzf.vim"))
    " command :Find
    command! -bang -nargs=* Find call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-case --no-ignore --hidden --follow --glob "!.git/*" --color "always" '.shellescape(<q-args>).'| tr -d "\017"', 1, <bang>0)
endif
" }

" Python module management  {
if isdirectory(expand("~/.vim/bundle/python-support.nvim"))
    " disable python2 checking
    let g:python_support_python2_require = 0
    " for python completions
    let g:python_support_python3_requirements = add(get(g:,'python_support_python3_requirements',[]),'jedi')
    " language specific completions on markdown file
    let g:python_support_python3_requirements = add(get(g:,'python_support_python3_requirements',[]),'mistune')

    " utils, optional
    let g:python_support_python3_requirements = add(get(g:,'python_support_python3_requirements',[]),'psutil')
    let g:python_support_python3_requirements = add(get(g:,'python_support_python3_requirements',[]),'setproctitle')
endif
" }

" YouCompleteMe {

"function! g:UltiSnips_Complete()
"    call UltiSnips#ExpandSnippet()
"    if g:ulti_expand_res == 0
"        if pumvisible()
"            return "\<C-n>"
"        else
"            call UltiSnips#JumpForwards()
"            if g:ulti_jump_forwards_res == 0
"                return "\<TAB>"
"            endif
"        endif
"    endif
"    return ""
"endfunction
"
"function! g:UltiSnips_Reverse()
"    call UltiSnips#JumpBackwards()
"    if g:ulti_jump_backwards_res == 0
"        return "\<C-P>"
"    endif
"
"    return ""
"endfunction


if count(g:spf13_bundle_groups, 'youcompleteme')
    " Wrap CSS complete sources to SCSS
    autocmd FileType scss UltiSnipsAddFiletypes scss.css
    " remap Ultisnips for compatibility for YCM
    let g:UltiSnipsExpandTrigger           = "<tab>"
    let g:UltiSnipsJumpForwardTrigger      = "<tab>"
    let g:UltiSnipsJumpBackwardTrigger     = "<s-tab>"

    au InsertEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger . " <C-R>=g:UltiSnips_Complete()<cr>"
    au InsertEnter * exec "inoremap <silent> " . g:UltiSnipsJumpBackwardTrigger . " <C-R>=g:UltiSnips_Reverse()<cr>"

endif
" }

" NeoComplete {
    if count(g:spf13_bundle_groups, 'neocomplete')
        " Enable omni completion.
        autocmd FileType scss setlocal omnifunc=csscomplete#CompleteCSS
    endif
" }

" ncm2 {
    if isdirectory(expand("~/.vim/bundle/ncm2"))
        " enable ncm2 for all buffers
        autocmd BufEnter * call ncm2#enable_for_buffer()

        " :help Ncm2PopupOpen for more information
        set completeopt=noinsert,menuone,noselect

        " suppress the annoying 'match x of y', 'The only match' and 'Pattern not
        " found' messages
        set shortmess+=c

        " CTRL-C doesn't trigger the InsertLeave autocmd . map to <ESC> instead.
        inoremap <c-c> <ESC>

        " When the <Enter> key is pressed while the popup menu is visible, it only
        " hides the menu. Use this mapping to close the menu and also start a new
        " line.
        " inoremap <expr> <CR> (pumvisible() ? "\<c-y>\<cr>" : "\<CR>")

        " Use <TAB> to select the popup menu:
        inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
        inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

    endif
" }

" ncm2-ultisnips {
if isdirectory(expand("~/.vim/bundle/ncm2-ultisnips"))
    " Press enter key to trigger snippet expansion
    " The parameters are the same as `:help feedkeys()`
    " inoremap <silent> <expr> <CR> ncm2_ultisnips#expand_or("\<CR>", 'n')

    " c-j c-k for moving in snippet
    " let g:UltiSnipsExpandTrigger		= "<Plug>(ultisnips_expand)"
    let g:UltiSnipsJumpForwardTrigger	= "<c-j>"
    let g:UltiSnipsJumpBackwardTrigger	= "<c-k>"
    let g:UltiSnipsRemoveSelectModeMappings = 0
endif
" }

" vim-snippets {
    if isdirectory(expand("~/.vim/bundle/vim-snippets"))
        let g:snips_author = "Isulew <netcookies@gmail.com>"
        let g:snips_email = "netcookies@gmail.com"
        let g:snips_github = "https://github.com/netcookies"
    endif
" }

" HTML {
"autocmd BufReadPost *.ftl set syntax=html
autocmd BufNewFile,BufRead *.ftl set filetype=html
"autocmd BufNewFile,BufRead *.jade set filetype=html
"autocmd FileType html setlocal tabstop=4 shiftwidth=4 softtabstop=0 noexpandtab
"autocmd FileType ftl  setlocal tabstop=4 shiftwidth=4 softtabstop=0 noexpandtab
autocmd BufWritePre,FileWritePre *.html silent! :%s/href=""/href="#"/g
" }

" CSS color preview {
let g:colorizer_auto_filetype='less,sass,scss,css,html'
" }

" Custom keybindings {
:nnoremap <leader>ts :w !pbcopy<CR><CR>
:vmap pr "_dP
:nnoremap <C-J> <C-W><C-J>
:nnoremap <C-K> <C-W><C-K>
:nnoremap <C-L> <C-W><C-L>
:nnoremap <C-H> <C-W><C-H>
" }
